import { getVideoInfo, getTranscript } from "../services/youtubeService";
import { sanitizeVideoUrl, validateVideoId } from "../utils/videoUtils";
import { ApiError } from "../utils/errors";
import { cacheService } from "../services/cacheService";
import { logger } from "../utils/logger";

class VideoController {
  constructor() {
    this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 hours
  }

  // Get video transcript
  // Get video transcript with URL (optimized version)
  async getVideoTranscriptFast(req, res, next) {
    try {
      const { url } = req.query;

      if (!url) {
        throw new ApiError("Video URL is required", 400);
      }

      // Quick sanitize and validate
      const sanitizedUrl = sanitizeVideoUrl(url);
      const videoId = validateVideoId(sanitizedUrl);

      if (!videoId) {
        throw new ApiError("Invalid YouTube URL", 400);
      }

      // Minimal cache check
      const cacheKey = `transcript-fast:${videoId}`;
      const cachedTranscript = await cacheService.get(cacheKey);
      if (cachedTranscript) {
        logger.info(`Fast cache hit for video ${videoId}`);
        return res.json(cachedTranscript);
      }

      // Get only essential transcript data
      const transcript = await getTranscript(videoId);

      if (!transcript) {
        throw new ApiError("No transcript available for this video", 404);
      }

      const response = {
        videoId,
        transcript: transcript,
        language: transcript.language,
        isAutoGenerated: transcript.isAutoGenerated,
      };

      // Cache with shorter timeout
      await cacheService.set(cacheKey, response, this.cacheTimeout / 2);

      res.json(response);
    } catch (error) {
      logger.error("Error in getVideoTranscriptFast:", error);
      next(error);
    }
  }

  async getVideoTranscript(req, res, next) {
    try {
      const { url } = req.query;

      if (!url) {
        throw new ApiError("Video URL is required", 400);
      }

      // Sanitize and validate URL
      const sanitizedUrl = sanitizeVideoUrl(url);
      const videoId = validateVideoId(sanitizedUrl);

      if (!videoId) {
        throw new ApiError("Invalid YouTube URL", 400);
      }

      // Check cache first
      const cachedData = await cacheService.get(`transcript:${videoId}`);
      if (cachedData) {
        logger.info(`Cache hit for video ${videoId}`);
        return res.json(cachedData);
      }

      // Get video info and transcript
      const [videoInfo, transcript] = await Promise.all([
        getVideoInfo(videoId),
        getTranscript(videoId),
      ]);

      if (!transcript) {
        throw new ApiError("No transcript available for this video", 404);
      }

      const response = {
        videoInfo: {
          title: videoInfo.title,
          author: videoInfo.author,
          duration: videoInfo.duration,
          thumbnail: videoInfo.thumbnailUrl,
          description: videoInfo.description,
          publishDate: videoInfo.publishDate,
          views: videoInfo.views,
        },
        transcript: transcript,
        language: transcript.language,
        isAutoGenerated: transcript.isAutoGenerated,
      };

      // Cache the response
      await cacheService.set(
        `transcript:${videoId}`,
        response,
        this.cacheTimeout
      );

      res.json(response);
    } catch (error) {
      logger.error("Error in getVideoTranscript:", error);

      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({ error: error.message });
      }

      next(error);
    }
  }

  async getVideoMetadata(req, res, next) {
    try {
      const { url } = req.query;

      if (!url) {
        throw new ApiError("Video URL is required", 400);
      }

      const sanitizedUrl = sanitizeVideoUrl(url);
      const videoId = validateVideoId(sanitizedUrl);

      if (!videoId) {
        throw new ApiError("Invalid YouTube URL", 400);
      }

      // Check cache
      const cachedData = await cacheService.get(`metadata:${videoId}`);
      if (cachedData) {
        return res.json(cachedData);
      }

      const videoInfo = await getVideoInfo(videoId);

      const response = {
        id: videoId,
        title: videoInfo.title,
        author: videoInfo.author,
        duration: videoInfo.duration,
        thumbnail: videoInfo.thumbnailUrl,
        description: videoInfo.description,
        publishDate: videoInfo.publishDate,
        views: videoInfo.views,
        hasTranscript: videoInfo.hasTranscript,
        availableLanguages: videoInfo.availableLanguages || [],
      };

      // Cache metadata
      await cacheService.set(
        `metadata:${videoId}`,
        response,
        this.cacheTimeout
      );

      res.json(response);
    } catch (error) {
      logger.error("Error in getVideoMetadata:", error);

      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({ error: error.message });
      }

      next(error);
    }
  }

  async getAvailableLanguages(req, res, next) {
    try {
      const { url } = req.query;

      if (!url) {
        throw new ApiError("Video URL is required", 400);
      }

      const sanitizedUrl = sanitizeVideoUrl(url);
      const videoId = validateVideoId(sanitizedUrl);

      if (!videoId) {
        throw new ApiError("Invalid YouTube URL", 400);
      }

      const languages = await getVideoInfo(videoId).then(
        (info) => info.availableLanguages
      );

      res.json({ languages });
    } catch (error) {
      logger.error("Error in getAvailableLanguages:", error);

      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({ error: error.message });
      }

      next(error);
    }
  }

  async validateVideo(req, res, next) {
    try {
      const { url } = req.query;

      if (!url) {
        throw new ApiError("Video URL is required", 400);
      }

      const sanitizedUrl = sanitizeVideoUrl(url);
      const videoId = validateVideoId(sanitizedUrl);

      if (!videoId) {
        throw new ApiError("Invalid YouTube URL", 400);
      }

      const videoInfo = await getVideoInfo(videoId);

      res.json({
        valid: true,
        videoId,
        hasTranscript: videoInfo.hasTranscript,
        duration: videoInfo.duration,
        isAccessible: true,
      });
    } catch (error) {
      logger.error("Error in validateVideo:", error);

      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({ error: error.message });
      }

      res.json({
        valid: false,
        error: error.message,
      });
    }
  }
}

export const videoController = new VideoController();
